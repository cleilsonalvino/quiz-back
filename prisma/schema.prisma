// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Friendship {
  id        String   @id @default(uuid())
  requester User     @relation("RequestedFriendships", fields: [requesterId], references: [id])
  requesterId String

  addressee User     @relation("AddresseeFriendships", fields: [addresseeId], references: [id])
  addresseeId String

  status    FriendshipStatus @default(PENDING) // PENDING, ACCEPTED, DECLINED, BLOCKED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([requesterId, addresseeId]) // Garante que não haja solicitações duplicadas na mesma direção
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  DECLINED
  BLOCKED
}

// Opcional: Adicione a relação de amizades ao modelo User para fácil acesso
model User {
  id               String       @id @default(uuid())
  username         String       @unique
  email            String       @unique
  password         String
  score            Int          @default(0)
  status           String       @default("Offline") // Online, Offline, In-Game
  pushToken        String?      @unique
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  // Relações de amizade
  requestedFriendships Friendship[] @relation("RequestedFriendships") // Amizades que este usuário solicitou
  addresseeFriendships Friendship[] @relation("AddresseeFriendships") // Amizades que este usuário recebeu
  // ... outras relações se tiver
}
// NOVO MODELO: Match
model Match {
  id            String    @id @default(uuid())
  player1Id     String
  player2Id     String
  player1Username String // Para facilitar a consulta sem JOIN complexo
  player2Username String // Para facilitar a consulta sem JOIN complexo
  category      String
  player1Score  Int
  player2Score  Int
  createdAt     DateTime  @default(now())
  
  // Opcional: Relacionamentos com o modelo User (descomente se for usar)
  // player1     User      @relation("Player1Matches", fields: [player1Id], references: [id])
  // player2     User      @relation("Player2Matches", fields: [player2Id], references: [id])
}